// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication and relationships
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // Hashed password
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication related fields
  sessions      Session[]
  accounts      Account[]

  // App relationships
  notes         Note[]
  actionItems   ActionItem[]
  chatThreads   ChatThread[]
  folders       Folder[]
}

// NextAuth required models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Note-taking app specific models
model Note {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId    String?
  folder      Folder?     @relation(fields: [folderId], references: [id])
  tags        TagsOnNotes[]
  actionItems ActionItem[]
  chatThreads ChatThread[]

  @@index([userId])
  @@index([folderId])
}

model Folder {
  id        String    @id @default(cuid())
  name      String
  path      String    // Stored as /parent/child format
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[]  @relation("FolderHierarchy")
  notes     Note[]

  @@unique([userId, path])
  @@index([userId])
  @@index([parentId])
}

model Tag {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  notes     TagsOnNotes[]

  @@unique([name])
}

model TagsOnNotes {
  noteId    String
  tagId     String
  note      Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@index([noteId])
  @@index([tagId])
}

model ActionItem {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  priority    Priority  @default(MEDIUM)
  effortLevel String    @default("M")  // S/M/L
  dueDate     DateTime?
  status      Status    @default(NOT_STARTED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  noteId      String?
  note        Note?     @relation(fields: [noteId], references: [id])
  threadId    String?
  chatThread  ChatThread? @relation(fields: [threadId], references: [id])

  @@index([userId])
  @@index([noteId])
  @@index([threadId])
}

model ChatThread {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relationships
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  notes     Note[]      // Referenced notes for context
  tasks     ActionItem[]

  @@index([userId])
}

model Message {
  id          String      @id @default(cuid())
  content     String      @db.Text
  role        Role
  createdAt   DateTime    @default(now())

  // Relationship
  threadId    String
  chatThread  ChatThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum Role {
  USER
  ASSISTANT
}
